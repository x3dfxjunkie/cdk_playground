# This is a basic workflow to help you get started with Actions

name: CI

permissions:
  contents: write
  pull-requests: write

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check-linting:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      fail-fast: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v42
        with:
          files: |
            **/*.py
      - uses: actions/setup-python@v4
        if: steps.changed-files.outputs.any_changed == 'true'
        with:
          python-version: '3.10'
      - name: setup black
        if: steps.changed-files.outputs.any_changed == 'true'
        run: pip install black
      - name: test-linting
        id: test-linting
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          set +e

          # make an array
          all_changed_and_modified_files=(${{steps.changed-files.outputs.all_changed_and_modified_files}})

          # checks the formatting against black
          result=$(python -m black -l 120 $(echo ${all_changed_and_modified_files[@]}) --no-color --check 2>&1); status=$(echo $?)

          # escape return values
          output="${result//'%'/'%25'}"
          output="${output//$'\n'/'%0A'}"
          output="${output//$'\r'/'%0D'}"
          echo "::set-output name=result::$(echo "$output")"
          echo "::set-output name=status::$status"
          set -e
      - name: Comment PR
        uses: mshick/add-pr-comment@v2
        if: steps.changed-files.outputs.any_changed == 'true'
        with:
          message: |
            ${{steps.test-linting.outputs.result}}
          message-id: lint_results
      - name: Comment PR skipped
        if: steps.changed-files.outputs.any_changed == 'false'
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            Lint Check Skipped since no files were changed
          message-id: lint_results

  tests:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      fail-fast: true
    timeout-minutes: 10
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Runs a set of commands using the runners shell
      - name: pytest
        run: |
          cd app
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          echo "running pytest"
          pytest -rP -vv

  synth:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      fail-fast: true
    timeout-minutes: 5
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          cd app
          pip install -r requirements.txt
          npx aws-cdk synth '**'

  approve:
    runs-on: ubuntu-latest
    needs:
      - synth
      - tests
      - check-linting
    steps:
      - name: Auto Approve
        uses: hmarr/auto-approve-action@v3.2.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  dependabot:
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' }}
    needs:
      - approve
    steps:
      - name: Enable auto-merge for Dependabot PRs
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Approve a PR
        run: gh pr review --approve "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.PAT}}
