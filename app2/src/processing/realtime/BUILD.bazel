load("@external_python_packages//:requirements.bzl", "requirement")
load("//app/tools/build_rules/lambda_packaging:lambda.bzl", "contains", "endswith", "startswith")
load("//app/tools/pytest:defs.bzl", "pytest_test")
load("//app/tools/macros/py_lambda_library:def.bzl", "py_lambda_library")
load("//app/tools/macros/zip_py_lambda_library:def.bzl", "zip_py_lambda_library")

py_lambda_library(
    name = "processing_realtime",
    srcs = glob([
        "module/**/*.py",
        "module/*.py",
    ]) + ["processing_lambda.py"],
    data = [
        "__init__.py",
        "//app/src/processing",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//app/src/data_structures/data_contracts",
        "//app/src/data_structures/identity",
        "//app/src/data_structures/object_lookup",
        requirement("boto3"),
        requirement("botocore"),
        requirement("dataclasses-json"),
        requirement("opentelemetry-sdk"),
        requirement("opentelemetry-sdk-extension-aws"),
        requirement("opentelemetry-propagator-aws-xray"),
        requirement("aws-lambda-powertools"),
    ],
)

zip_py_lambda_library(
    name = "processing_realtime_lambda",
    data = [
        "//app/src:missing_init_files",
    ],
    ignore = [
        contains("/__pycache__/"),
        endswith(".pyc"),
        endswith(".pyo"),

        # Ignore boto since it's provided by Lambda.
        startswith("boto3"),
        startswith("botocore"),
        startswith("s3transfer"),
        startswith("setuptools"),

        # With the move to hermetic toolchains, the zip gets a lib/ directory containing the
        # python runtime. We don't need that.
        startswith("lib/"),
        startswith("__init__.py"),
    ],
    target = ":processing_realtime",
)

pytest_test(
    name = "test_processing_realtime",
    srcs = glob(["tests/*.py"]),
    deps = [
        ":processing_realtime",
        "//app/guest360_constructs",
        "//app/src/data_structures",
        "//app/src/data_structures/identity",
        "//app/src/data_structures/tests/utils",
        "//app/src/data_structures/tests/utils/configs",
        "//app/tools/test_data",
        "//test_helpers",
        requirement("aws-cdk-lib"),
        requirement("docker"),
        requirement("pyyaml"),
        requirement("moto"),
        requirement("mock"),
        requirement("boto3"),
        requirement("botocore"),
        requirement("opentelemetry-sdk"),
        requirement("opentelemetry-sdk-extension-aws"),
        requirement("opentelemetry-propagator-aws-xray"),
        requirement("aws-lambda-powertools"),
    ],
)

#Also create a library for the test classes, since these are sometimes referenced in other test modules:

py_lambda_library(
    name = "processing_realtime_test_modules",
    srcs = glob(["tests/*.py"]),
    data = ["//app/src:missing_init_files"],
    visibility = ["//visibility:public"],
    deps = [
        ":processing_realtime",
        "//app/guest360_constructs",
        "//app/src/data_structures",
        "//app/tools/test_data",
        "//test_helpers",
        requirement("aws-cdk-lib"),
        requirement("docker"),
        requirement("pyyaml"),
        requirement("moto"),
        requirement("mock"),
        requirement("boto3"),
        requirement("botocore"),
        requirement("opentelemetry-sdk"),
        requirement("opentelemetry-sdk-extension-aws"),
        requirement("opentelemetry-propagator-aws-xray"),
        requirement("aws-lambda-powertools"),
    ],
)
